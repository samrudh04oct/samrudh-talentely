#include <stdio.h>

int main() {
    printf("Hello, World!\n");
    return 0;
}
*********2*********
#include <stdio.h>

int main() {
    int num1, num2, sum;

    printf("Enter two numbers: ");
    scanf("%d %d", &num1, &num2);

    sum = num1 + num2;

    printf("Sum of %d and %d is: %d\n", num1, num2, sum);

    return 0;
}
*****3*****
#include <stdio.h>

int main() {
    int num, i, factorial = 1;

    printf("Enter a number: ");
    scanf("%d", &num);

    if (num < 0) {
        printf("Factorial is not defined for negative numbers.\n");
    } else {
        for (i = 1; i <= num; i++) {
            factorial *= i;
        }

        printf("Factorial of %d is: %d\n", num, factorial);
    }

    return 0;
}
*****4*****
#include <stdio.h>

int main() {
    int num, i, isPrime = 1;

    printf("Enter a number: ");
    scanf("%d", &num);

    if (num <= 1) {
        isPrime = 0;
    } else {
        for (i = 2; i <= num / 2; i++) {
            if (num % i == 0) {
                isPrime = 0;
                break;
            }
        }
    }

    if (isPrime) {
        printf("%d is a prime number.\n", num);
    } else {
        printf("%d is not a prime number.\n", num);
    }

    return 0;
}
*****5*****
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Function prototypes
void displayMenu();
void executeCommand(const char* command);
void handleError(const char* message);

int main() {
    char command[100];

    printf("\nWelcome to Jarvis AI\n");

    while (1) {
        displayMenu();
        printf("Enter command: ");
        fgets(command, sizeof(command), stdin);

        // Remove trailing newline from input
        command[strcspn(command, "\n")] = 0;

        if (strcmp(command, "exit") == 0) {
            printf("Exiting Jarvis AI.\n");
            break;
        }

        executeCommand(command);
    }

    return 0;
}

void displayMenu() {
    printf("\nAvailable Commands:\n");
    printf(" - time\n");
    printf(" - date\n");
    printf(" - help\n");
    printf(" - exit\n");
}

void executeCommand(const char* command) {
    if (strcmp(command, "time") == 0) {
        time_t now = time(NULL);
        struct tm *local_time = localtime(&now);
        printf("Current time: %02d:%02d:%02d\n", local_time->tm_hour, local_time->tm_min, local_time->tm_sec);
    } else if (strcmp(command, "date") == 0) {
        time_t now = time(NULL);
        struct tm *local_time = localtime(&now);
        printf("Current date: %02d/%02d/%d\n", local_time->tm_mday, local_time->tm_mon + 1, local_time->tm_year + 1900);
    } else if (strcmp(command, "help") == 0) {
        displayMenu();
    } else {
        handleError("Invalid command.");
    }
}

void handleError(const char* message) {
    printf("Error: %s\n", message);
}
